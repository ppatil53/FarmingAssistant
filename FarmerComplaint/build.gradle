plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//implementation group: 'org.apache.tomcat', name: 'tomcat-jasper', version: '10.1.0-M14'
// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.6.6'



compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.22'
// https://mvnrepository.com/artifact/org.jetbrains/annotations
implementation group: 'org.jetbrains', name: 'annotations', version: '23.0.0'
// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-autoconfigure
//implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: '3.0.0'
   // https://mvnrepository.com/artifact/jakarta.validation/jakarta.validation-api
implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.0.2'
   // https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
// https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'

// https://mvnrepository.com/artifact/
implementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.6.6'

    
}

tasks.named('test') {
	useJUnitPlatform()
}
jar {
manifest {
attributes(
'Main-Class': 'com.example.demo.FarmerComplaintsApplication'
)
}
from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}